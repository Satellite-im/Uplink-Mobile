def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    task myPrebuildTask(type: Exec) {
        preBuild.doFirst {
            workingDir "$rootProject.projectDir/"
            if (!file("./src/main/jniLibs/arm64-v8a/libwarp.so").exists()) {
                println('Downloading libwarp.so from warp-dart...')
                def proc = "wget https://raw.githubusercontent.com/Satellite-im/warp-dart/main/android/src/main/jniLibs/arm64-v8a/libwarp.so -P $workingDir/app/src/main/jniLibs/arm64-v8a".execute()
                def proc2 = "wget https://raw.githubusercontent.com/Satellite-im/warp-dart/main/android/src/main/jniLibs/x86/libwarp.so -P $workingDir/app/src/main/jniLibs/x86".execute()
                def proc3 = "wget https://raw.githubusercontent.com/Satellite-im/warp-dart/main/android/src/main/jniLibs/x86_64/libwarp.so -P $workingDir/app/src/main/jniLibs/x86_64".execute()
                }

            if (!file("./src/main/jniLibs/arm64-v8a/libwarp_mp_ipfs.so").exists()) {
                println('Downloading libwarp_mp_ipfs.so from warp-dart...')
                def proc = "wget https://raw.githubusercontent.com/Satellite-im/warp-dart/main/android/src/main/jniLibs/arm64-v8a/libwarp_mp_ipfs.so -P $workingDir/app/src/main/jniLibs/arm64-v8a".execute()
                def proc2 = "wget https://raw.githubusercontent.com/Satellite-im/warp-dart/main/android/src/main/jniLibs/x86/libwarp_mp_ipfs.so -P $workingDir/app/src/main/jniLibs/x86".execute()
                def proc3 = "wget https://raw.githubusercontent.com/Satellite-im/warp-dart/main/android/src/main/jniLibs/x86_64/libwarp_mp_ipfs.so -P $workingDir/app/src/main/jniLibs/x86_64".execute()
            }
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.satellite.uplink"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    // TODO: Remove when below fix is available in stable channel.
    // https://github.com/flutter/flutter/pull/82309
    lintOptions {
        checkReleaseBuilds false
    }

    signingConfigs {
        if (System.getenv("ANDROID_KEYSTORE_PATH")) {
            release {
                storeFile file(System.getenv("ANDROID_KEYSTORE_PATH"))
                keyAlias System.getenv("ANDROID_KEYSTORE_ALIAS")
                keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            }
        } else {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
